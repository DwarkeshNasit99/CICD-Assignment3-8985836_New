# Backup CI/CD Pipeline using GitHub Actions
# Use this if Jenkins continues to have issues

name: Azure Functions CI/CD Backup

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

env:
  AZURE_FUNCTIONAPP_NAME: 'cicd-fn-helloworld-canadacentral'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: windows-latest
    
    steps:
    - name: üì¶ Checkout repository
      uses: actions/checkout@v4

    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        npm ci
        npm run build --if-present

    - name: üß™ Run tests
      run: npm test -- --coverage --watchAll=false --ci

    - name: üìã Verify package structure
      run: |
        Write-Host "Package structure verification:"
        Get-ChildItem -Recurse | Where-Object { $_.Name -match '\.(js|json)$' } | ForEach-Object {
          Write-Host "  $($_.FullName.Replace($PWD, '.'))"
        }
        
        # Verify key files
        $keyFiles = @('package.json', 'host.json', 'httpTrigger/index.js', 'httpTrigger/function.json')
        foreach ($file in $keyFiles) {
          if (Test-Path $file) {
            Write-Host "‚úÖ $file - FOUND"
          } else {
            Write-Host "‚ùå $file - MISSING"
            exit 1
          }
        }
      shell: powershell

    - name: üöÄ Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: ‚úÖ Verify deployment
      run: |
        Start-Sleep -Seconds 30
        
        $maxAttempts = 6
        $attempt = 1
        $success = $false
        
        while ($attempt -le $maxAttempts -and -not $success) {
          Write-Host "‚è≥ Attempt $attempt of $maxAttempts - Testing function..."
          
          try {
            $functionUrl = "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/hello"
            $response = Invoke-WebRequest -Uri $functionUrl -Method GET -UseBasicParsing -TimeoutSec 30
            
            if ($response.StatusCode -eq 200) {
              Write-Host "‚úÖ Function is responding correctly!"
              Write-Host "Response: $($response.Content.Substring(0, [Math]::Min(200, $response.Content.Length)))"
              $success = $true
            }
          } catch {
            Write-Host "‚ö†Ô∏è Function not ready yet (attempt $attempt): $($_.Exception.Message)"
          }
          
          if (-not $success -and $attempt -lt $maxAttempts) {
            Start-Sleep -Seconds 30
          }
          $attempt++
        }
        
        if (-not $success) {
          Write-Host "‚ùå Function verification failed after $maxAttempts attempts"
          exit 1
        }
      shell: powershell

# Optional: Add deployment notifications
    - name: üìß Notify on success
      if: success()
      run: |
        Write-Host "üéâ Deployment successful!"
        Write-Host "Function URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/hello"
      shell: powershell

    - name: üìß Notify on failure  
      if: failure()
      run: |
        Write-Host "‚ùå Deployment failed!"
        Write-Host "Check the logs above for details."
      shell: powershell